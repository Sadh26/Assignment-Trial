# This is a basic workflow to help you get started with Actions

name: Test-vis

# Controls when the workflow will run
on:
  # Triggers the workflow on push to the current branch you are working. 
  # It is advised to work on a feature branch and not the master/main branch.
  push:

  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job Unit-tests"
  test-vi:
    # Set the self hosted runner
    runs-on: self-hosted

    steps:
      # Checkout the repository to the runner
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Run VI Analyzer and Unit Test
        run: |
          function Find-ViFiles {
              param (
                  [string]$path
              )

              Get-ChildItem $path -Recurse | ForEach-Object {
                  if ($_.PSIsContainer) {
                      Find-ViFiles $_.FullName
                  }
                  elseif ($_.Extension -eq ".vi") {
                      $isFileExist = $true
                      Write-Output ("`n`nFound .vi file: " + $_.FullName)
                      Write-Output ("Running unit test file " + $_.FullName)
                      "C:\Program Files\G-CLI\bin\g-cli.exe" --lv-ver 2020 --arch 64 "${{ github.workspace }}\Assignment 1\Celsius to Farenheit\Tests\Test Convert.vi" -- -project-path "${{ github.workspace }}\Assignment 1\Celsius to Farenheit\CelsiusToFarenheit.lvproj"
                      g-cli --lv-ver 2020 --arch 64 $_.FullName
                  }
              }
          }

          # The starting directory for iteration
          $starting_directory = "Tests"


          $isFileExist = $false
          Find-ViFiles $starting_directory


          if ($isFileExist -eq $false) {
              Write-Output "No VI Analyzer files or test files found"
          }

          Write-Output $isFileExist

  changed_files:
    # NOTE:
    # - This is limited to pull_request* events and would raise an error for other events.
    # - A maximum of 3000 files can be returned.
    # - For more flexibility and no limitations see "Using local .git history" above.

    runs-on: self-hosted  # windows-latest || macos-latest
    name: Test changed-files
    # permissions:
    #   pull-requests: read

    steps:
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37

      - name: List all changed files
        run: |
          Write-Output "running..."
          $changedFiles = ${{ steps.changed-files.outputs.all_changed_files }}
          foreach ($file in $changedFiles) {
            Write-Output "$file was changed"
            Write-Output "running1..."
          }

  changed_files1:

    runs-on: self-hosted  # windows-latest || macos-latest
    name: Test changed-files1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      # Example 1
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37

      # NOTE: `since_last_remote_commit: true` is implied by default and falls back to the previous local commit.

      - name: List all changed files
        run: |
          Write-Output "running..."
          $changedFiles = ${{ steps.changed-files.outputs.all_changed_files }}
          foreach ($file in $changedFiles) {
            Write-Output "$file was changed"
            Write-Output "running1..."
          }


